@page "/documents/details/{Id:int}"
@* @rendermode InteractiveWebAssembly *@
@using CWDocMgrBlazor.Client.Models
@using SharedLib.DTOs
@using SharedLib.Models
@using SharedLib.ViewModels
@inject HttpClient Http


@if (document == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>Document: @document.OriginalDocumentName</h4>
    <div class="d-flex flex-row mb-6">
        <div class="d-flex flex-column mb-6" style="border: 1px solid #ccc; padding: 10px; border-radius: 4px;">
            <div class="p-1">
                <strong>Date:</strong> @document.DocumentDate.ToString("yyyy-MM-dd")
            </div>
            <div class="p-1">
                <strong>User Name:</strong> @document.UserName
            </div>
        </div>
        <div class="d-flex flex-column mb-6" style="border: 1px solid #ccc; padding: 10px; border-radius: 4px;">
            <button class="btn btn-primary mb-2" @onclick="() => DoOcr()">OCR</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(document.OCRText))
    {
        <p><strong>OCR Text:</strong> @document.OCRText</p>
    }
    @if (!string.IsNullOrEmpty(document.FileContent))
    {
        <img src="@document.FileContent" alt="Document Image" style="width:100%; max-height:auto;" />
    }
    else
    {
        <p><em>No image available.</em></p>
    }
}

@code {
    [Parameter] public int Id { get; set; }
    private DocumentDetailsVM? document;

    protected override async Task OnInitializedAsync()
    {
        document = await Http.GetFromJsonAsync<DocumentDetailsVM>($"api/documents/{Id}");
    }

    private async Task DoOcr()
    {
        try
        {
            // Create the request DTO
            var ocrRequest = new OCRRequestDto { Id = Id };

            // Send POST request to the OCR endpoint
            var response = await Http.PostAsJsonAsync("api/documents/ocrdocument", ocrRequest);

            // Check if the request was successful
            if (response.IsSuccessStatusCode)
            {
                // Deserialize the response
                var result = await response.Content.ReadFromJsonAsync<OcrResponse>();
                if (result != null)
                {
                    // Update the document with the OCR text
                    document.OCRText = result.ocrText;
                    StateHasChanged(); // Notify Blazor to update the UI
                }
            }
            else
            {
                // Handle error
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"OCR processing failed: {errorMessage}");
                // Optionally display an error message to the user
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OCR processing: {ex.Message}");
            // Optionally display an error message to the user
        }
    }
}
