@using SharedLib.Models
@using SharedLib.ViewModels
@using Microsoft.AspNetCore.Components.Routing

<table class="table document-table">
    <thead>
        <tr>
            <th>Original Name</th>
            <th>Name</th>
            <th>Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var doc in Documents)
        {
            <tr class="document-table">
                <td>@doc.OriginalDocumentName</td>
                <td>@doc.DocumentName</td>
                <td>@doc.DocumentDate</td>
                <td><button class="btn btn-link action-item" @onclick="() => DocumentDetails(doc.Id)">View</button>
                <button class="btn btn-link action-item" @onclick="() => DeleteDocument(doc.Id)">Delete</button></td>

                @* <a asp-controller="Document" asp-action="Edit" asp-route-id="@doc.Id">Edit</a> *@
                @* <td><button class="btn btn-link" onclick="doOCR(@doc.Id)">OCR</button></td> *@

            </tr>
        }
    </tbody>
</table>


@code {
    [Parameter] public List<DocumentVM> Documents { get; set; } = new List<DocumentVM>();
    [Parameter] public EventCallback OnDocumentDeleted { get; set; }

    [Inject] private HttpClient _httpClient { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    // In your client-side component or service
    public async Task DeleteDocument(int id)
    {
        Console.WriteLine($"Attempting to delete document {id}");
        try
        {
            var response = await _httpClient.PostAsync($"api/Documents/delete/{id}", null);
            Console.WriteLine($"Delete response: {response.StatusCode}");
            if(response.IsSuccessStatusCode)
            {
                await OnDocumentDeleted.InvokeAsync();
            }
            else
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Delete failed: {responseContent}");
                // Handle error
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception deleting document: {ex}");
            // Handle exception
        }
    }

    private void DocumentDetails(int id)
    {
        NavigationManager.NavigateTo($"/documents/details/{id}");
    }

    // function doOCR(id)
    // {
    //     console.log("in DoOCR()");
    //     fetch('/document/ocr/' + id)
    //         .then(response =>
    //         {
    //             if (!response.ok)
    //             {
    //                 throw new Error('Network response was not ok');
    //             }
    //             //return response.json();
    //         })
    //         .then(data =>
    //         {
    //             //console.log(data);
    //             //document.getElementById('output').innerText = JSON.stringify(data);
    //         })
    //         .catch(error =>
    //         {
    //             console.error('There has been a problem with your fetch operation:', error);
    //         });
    // }

}
